1. Принципы ООП:
- Инкапсуляция,
- Полиморфизм,
- Наследование,
- (Абстракция).

Инкапсуляция - подразумевает, что объект может содержать в себе свойства и методы, скрытые от обращения извне.
Полиморфизм - означает, что одни и те же методы и операторы, могуты выполнять различные действия в зависимости от типов их аргуметов.
Наследование - один класс может наследоватья от другого класса (рассширение класса), при этом получая свойства и методы
                родительского класса, доступные для наследования.
Абстракция - класс по сутия является абстрактным типом данных.

Примеры см. в классе Answer1.


2. Модификаторы доступа, область видимости каждого.
4 модификатора:
- public - обеспечивает доступ к члену класса без ограничений.
- protected - доступ возможен только в пределах пакета либо из классов-наследников
- private - доступен только внутри класса
- пустой - доступен в пределах пакета.

3. Пример полиморфизма в java
см. класс Answer1.
В данном примере реализована перегрузка метода getSum. Так же используется самый простой пример полиморфизма в Java - операция '+'.

4. Что такое static?
При создании экземпляра класса (объекта) создаются экземпляры всех его членов.
Ключевое слово static в описании члена класса обозначает, что данный метод (свойство класса) будет существовать в единственном
 экземпляре не зависимо от того, сколько будет создано объектов его класса. При этом из любого объекта к данному члену класса
 осуществляется доступ.
См. пример Answer4.


5. String методы (5 - 10 шт) - что делают?
-  isEmpty() - возвращает true, если строка пуста
-  indexOf(exp) - возвращает начальную позицию указанного строкового выражения в вызывающем объекте (-1 если не найдено данное выражение)
-  length() - возвращает длинну строки в вызывающем объекте
-  compareTo(exp) - возвращает разницу (лексикографически) между строкой вызывающего объекта и объекта-аргумента (0 - если єквивалентні)
-  toCharArray() - возвращает массив типа char из вызывающей строки
-  toLowerCase() - преобразует вызывающую строку в нижний регистр
-  toLowerCase() - преобразует вызывающую строку в верхний регистр
-  replace(oldChar, newChar) - возвращает строку с замененными символами oldChar на newChar

6. Отличие String, StringBuilder, StringBuffer (вкратце)
Главным отличием String от StringBuilder и StringBuffer является то, что объект String не изменяемый,
при каждом действии над этим объектом мы получаем новый объект с внесенными изменениями.
Объекты StringBuilder и StringBuffer изменяются при выполнении их методов, что существенно снижает время выполнения операций
и затраты памяти. StringBuffer ориентирован на многопоточное выполнение.

7. Что такое this (пример использования)
- это ключевое слово, позволяющее обращаться к члену класса. Является необходимым, если, к примеру, в методе, который
обращается к члену класса присутствует локальная переменная или параметр с тем же именем.
См. пример класс Answer7.

 8. Что такое super (пример использования)
 - ключевое слово для обращения к члену класса-родителя из класса-наследника лиюо вызов конструктора класса-родителя.
См. пример класс Answer1

9. Что такое конструктор класса? Когда он вызывается? Пример конструктора.
Конструктор класса - это метод, вызывающийся при создании экземпляра класса. Используется для инициализации переменных класса
при создании его экземпляра. Может быть переопределен. Если он не описан в классе, то вызывается неявно.
См. пример класс Parent

10. Чем отличается Абстрактный класс и Интерфейс
Главным отличием является, то что наследоваться можно только от одного абстрактного класса, в то время как имплементировать
можно несколько интерфейсов. До версии 8, интерфейс не мог содержать неабстрактные методы в отличие от класса.

11. Отличия ArrayList от LinkedList
ArrayList реализован на основе массива, обеспечивает стабильное вресмя обращения к любому его эелементу по индексу,
при удалении его элемента, длина не изменяется, все элементы справа от удаленного сдвигаются на один влево.
LinkedList реализован на основе объекта, быстрее работает при добавлении/удалении элемента, при этом проигрывает
ArrayList по затратам памяти.

12. Реализации коллекции Set, их отличия.
HashSet - не сохраняет первоначальную последовательность добавления элементов (сортирует их по хешу).
LinkedHashSet - сохраняет первоначальную последовательность добавления элементов.
TreeSet - также не сохраняет первоначальную последовательность добавления элементов (сортирует по лексикографическому принципу)

13. Итерация по Map. (Пример)
См. пример

14. Есть List<String> names. Удалить из него все элементы включающие букву “S”.
См. класс Answer14.

15. Отсортировать список имен по убыванию.
См. класс Answer15.

16. Что такое break? Пример использования.
break - оператор выхода из какого либо цикла или ветвления.
См. пример класс Answer16.

17. Что такое return? Примеры
return - оператор, выполняющий выход из метода с возвратом значения или объекта либо без.
См. пример класс Answer17

18. Рекурсия, пример использования.
Рекурсия - вызов метода внутри этого же метода. Поразумевает обязательное наличие условия выхода из цикла вызовов.

19. Exceptions (Какие бывают? Когда может возникнуть NullPointerException?)
- ошибки на этапе выполнения программы. Унаследованы от класс Exception, который в свою очередь унаследован от класса
Throwable. Бывают исключения, например, ввода/вывода - IOException, отсутствие файла - NoSuchFieldException,
отсутствие эелемента на странице (Селениум) - NoSuchElementException и т.д.
NullPointerException возникает при попытке обратиться к переменной ссылочного типа, не хранящей ссылку на объект (= null)

20. Варианты обработки Exceptions (примеры кода)
См. класс Answer20.

21. Слово final в Классах, методах (что означает ?)
final в описании класса означает, что от данного класса нельзя наследоваться.
final в описании метода означает, что данный метод нельзя переопределить в классе-наследнике.

22. Что означает void в методе?
void в сигнатуре метода означает, что он не возвращает никакого значения.

23. Суть PageObject паттерна заключается в описании каждой веб-страницы (отдельной области страницы) в виде класса,
содержащего ссылки на все элементы описываемой страницы, а также методы, воздействующте на эти элементы либо возвращающие их значения.
Таким образом, тесты составляются из последовательности методов, описанных в классе тестируемой страницы.

24. Перегрузка метода (пример)
См. класс Answer1. Перегрузка метода getSum.

25. Переопределение метода (пример)
См. класс Answer25.

26. Написать тест который будет использовать @DataProvider (вывод на экран параметра из датаПровайдера).
См. тест Answe26.

27. Написать метод который будет дожидаться появления 2го окна в браузере 10 секунд. (если окно появилось раньше, то переключиться на данное окно)
См. тест Answer27.

28. Get запрос на http://jsonplaceholder.typicode.com/posts.
См. тест Answer28.getRequest.

29. JSON to Java class (Из запроса выше, Создать класс-модель для данного jsona ).
См. класс JsonModel, тест Answer28.getRequest

30. Java class to JSON (Из запроса выше, класс в виде JSON(а)).
См. тест Answer28.javaClassToJson.




